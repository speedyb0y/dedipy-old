#define CHUNK_SIZE_SIZE(size)    ((size) & ~1ULL)
#define CHUNK_SIZE_IS_FREE(size) ((size) &  1ULL)

#define CHUNK_SIZE_FREE(size)  (size)
#define CHUNK_SIZE_USED(size) ((size) | 1ULL)

// LE O SIZE COM A FLAG DE FREE
#define CHUNK_SIZE(chunk)        (*(   u64*) (chunk)      )
#define CHUNK_PTR(chunk)         (*(void***)((chunk) +  8))
#define CHUNK_NEXT(chunk)        (*( void**)((chunk) + 16))
#define CHUNK_SIZE2(chunk, size) (*(   u64*)((chunk) + (size) - 8))

#define CHUNK_LEFT(chunk)         ((chunk) - CHUNK_SIZE_SIZE(CHUNK_LEFT_SIZE(chunk)))
#define CHUNK_RIGHT_(chunk)       ((chunk) + CHUNK_SIZE_SIZE(CHUNK_SIZE(chunk))
#define CHUNK_RIGHT(chunk, size)  ((chunk) + (size))

// LE O SIZE COM A FLAG DE FREE
#define CHUNK_LEFT_SIZE(chunk)         (*(u64*)((chunk) - 8))
#define CHUNK_RIGHT_SIZE(chunk, size)  (*(u64*)((chunk) + (size)))

// 32 38 44 51 57 64 76 89 102 115 128 153 179 204 230 256 307 358 409 460 512 614 716 819 921 1024 1228 1433 1638 1843 2048 2457 2867 3276 3686 4096 4915 5734 6553 7372 8192 9830 11468 13107 14745 16384 19660 22937 26214 29491 32768 39321 45875 52428 58982 65536 78643 91750 104857 117964 131072 157286 183500 209715 235929 262144 314572 367001 419430 471859 524288 629145 734003 838860 943718 1048576 1258291 1468006 1677721 1887436 2097152 2516582 2936012 3355443 3774873 4194304 5033164 5872025 6710886 7549747 8388608 10066329 11744051 13421772 15099494 16777216 20132659 23488102 26843545 30198988 33554432 40265318 46976204 53687091 60397977 67108864 80530636 93952409 107374182 120795955 134217728 161061273 187904819 214748364 241591910 268435456 322122547 375809638 429496729 483183820 536870912 644245094 751619276 858993459 966367641 1073741824 1288490188 1503238553 1717986918

#define HEADS_N 128

#define N_START 5
#define X_DIVISOR 5
#define X_SALT 1
#define X_LAST 5

#define FIRST_SIZE  0x0000000000000020ULL
#define SECOND_SIZE 0x0000000000000026ULL
#define LAST_SIZE   0x0000000059999999ULL
#define LMT_SIZE    0x0000000066666666ULL

//
#define BUFFER_HEADS_SIZE (HEADS_N * sizeof(void**))

//
#define BUFFER ((void*)0x20000000ULL)
#define BUFFER_HEADS          (BUFFER)
#define BUFFER_HEADS_LAST     (BUFFER + BUFFER_HEADS_SIZE - sizeof(void**))
#define BUFFER_L              (BUFFER + BUFFER_HEADS_SIZE)
#define BUFFER_CHUNKS         (BUFFER + BUFFER_HEADS_SIZE + sizeof(u64))
#define BUFFER_R(processSize) (BUFFER + processSize       - sizeof(u64))

//
#define BUFFER_FD 16384

typedef struct SlaveInfo SlaveInfo;

struct SlaveInfo {
    u64 pid;
    u64 id;
    u64 n; // quantos processos tem
    u64 code;
    u64 start;
    u64 size;
};

// QUALQUER UM ESCREVE, QUALQUER UM LE
#define ANY_GET_FD 16385
#define ANY_PUT_FD 16386

// MASTER
#define MASTER_GET_FD 16387
#define MASTER_PUT_FD 16388

// SLAVES ESPEC√çFICOS
#define SLAVE_GET_FD(slaveID) (16390 + 2*(slaveID))
#define SLAVE_PUT_FD(slaveID) (16391 + 2*(slaveID))

//
#define SELF_GET_FD 16389
#define SELF_PUT_FD 16390

#define FD_MAX 65536

#define SLAVE_BIN_PATH "slave"
#define SLAVE_ARG0 "slave"
